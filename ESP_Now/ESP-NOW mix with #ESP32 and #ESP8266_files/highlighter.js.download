var ab_highlight_timer;
function bt_highlight(selector){
    if(window.ab_highlight_timer) {
        clearTimeout(window.ab_highlight_timer);
        jQuery('.ab-highlight').removeClass('ab-highlight');
    }
    var elem;
    if(jQuery("#elementor-preview-iframe").length)
    {
      elem = jQuery("#elementor-preview-iframe").contents().find(selector);
      jQuery("#elementor-preview-iframe").contents().find('.ab-highlight').removeClass('ab-highlight');
    }
    else
    {
      elem = jQuery(selector);
      jQuery('.ab-highlight').removeClass('ab-highlight');
    }

    elem.addClass("ab-highlight");
    window.ab_highlight_timer = setTimeout(function(){
        elem.removeClass('ab-highlight');
    },2000);
}


jQuery(function(){

// add ai button to pages sao far gb and BB toolbars, need to do the rest
//  jQuery('.edit-post-header-toolbar__left, .fl-builder-bar-actions').append('<button><STRONG>AI</strong></button>')


  if ( self !== top ) // if inside an iframe, then its a preview and we dont want to do things.
    return;

  jQuery('body').on('change blur','[name="bt_click_conversion_selector"], .bt_click_conversion_selector input, [data-setting="bt_click_conversion_selector"]',function(){      
    bt_highlight(jQuery(this).val());
  });

});


// AI AI AI AI AI AI AI AI AI AI AI AI AI AI AI AI AI AI AI AI 
// AI AI AI AI AI AI AI AI AI AI AI AI AI AI AI AI AI AI AI AI 
// AI AI AI AI AI AI AI AI AI AI AI AI AI AI AI AI AI AI AI AI 



function abai(){
    var script = document.createElement('script');
    script.src = btab_vars.plugins_uri + "js/turndown.js";
    document.head.appendChild(script);
    script.onload = function() {
        console.log('Turndown script loaded to create context AI FORM');
    };

    jQuery.magnificPopup.open({
        items: {
            src: '#ab-ai-form', // can be a HTML string, jQuery object, or CSS selector
            type: 'inline'
        }
    });
}


jQuery(function(){

    jQuery('body',parent.window.document).on('click','#ab-ai, #wp-admin-bar-ab-ai, .ab-ai-launch',function(){
        abai();
    });

    jQuery('body').on('click','.ai-option',function(){
        var theText = jQuery(this).text();
        copyText(theText);
    });

    jQuery('#ab-rewrite-form').submit(function(event) {
        event.preventDefault();

        //display loading screen
        jQuery("#result .ai-responses").html('<p>'+loadingMessage()+' may take up to 30 seconds...</p>');
        jQuery('#result').fadeIn();
        jQuery('.ai-loading').show();

        //send request
        callOpenAI('suggestions','#result .ai-responses');
        
    });
    

    jQuery('input[type=radio][name=abaitype]').change(function() {
        jQuery("#result .ai-responses").text('submit to see response.');
        jQuery("#ab-ai-submit").show();
        if (this.value == 'suggestions') {
            jQuery('#suggestions-div').show();
            jQuery('#rewrite-div').hide();
        }
        else if (this.value == 'rewrite') {
            jQuery('#suggestions-div').hide();
            jQuery('#rewrite-div').show();
        }
    });

    // add to builders
    setTimeout(function(){ // improve this

        // bb
        jQuery( '.fl-builder-bar-actions', parent.window.document ).append( '<button class="ab-ai-launch fl-builder-button"> AI </button>' );
        
        //  gb
        jQuery('.edit-post-header-toolbar__left').append('<button type="button" data-toolbar-item="true" aria-disabled="false" class="components-button ab-ai-launch has-icon" aria-label="Launch AI"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" width="15" height="15" viewBox="0 0 24 24"><path d="M 17 2 A 2 2 0 0 0 15 4 A 2 2 0 0 0 16 5.7285156 L 16 7 L 13 7 L 13 5 L 13.001953 3.5546875 A 1.0001 1.0001 0 0 0 12.503906 2.6894531 C 11.787176 2.2732724 10.988534 2.0496274 10.183594 2.0175781 C 9.91528 2.006895 9.6455955 2.0167036 9.3789062 2.0488281 C 8.31215 2.1773261 7.2814338 2.6482536 6.4648438 3.4648438 C 6.1441089 3.7855785 5.8954006 4.1406575 5.6992188 4.515625 L 5.6699219 4.5 C 5.0630052 5.5507072 4.9071497 6.7326156 5.1015625 7.8476562 C 3.2754904 8.8728198 2 10.76268 2 13 C 2 14.819816 2.8864861 16.388036 4.1660156 17.484375 C 4.6408757 20.032141 6.8174874 22 9.5 22 C 10.627523 22 11.683838 21.655029 12.556641 21.070312 A 1.0001 1.0001 0 0 0 13 20.240234 L 13 19 L 13 17 L 16 17 L 16 18.269531 A 2 2 0 0 0 15 20 A 2 2 0 0 0 17 22 A 2 2 0 0 0 19 20 A 2 2 0 0 0 18 18.271484 L 18 16 A 1.0001 1.0001 0 0 0 17 15 L 13 15 L 13 13 L 19.271484 13 A 2 2 0 0 0 21 14 A 2 2 0 0 0 23 12 A 2 2 0 0 0 21 10 A 2 2 0 0 0 19.269531 11 L 13 11 L 13 9 L 17 9 A 1.0001 1.0001 0 0 0 18 8 L 18 5.7304688 A 2 2 0 0 0 19 4 A 2 2 0 0 0 17 2 z M 9.9765625 4.0253906 C 10.323274 4.0594887 10.663125 4.1899373 11 4.3144531 L 11 5 L 11 7.8320312 A 1.0001 1.0001 0 0 0 11 8.1582031 L 11 10.001953 L 10.994141 10.001953 C 10.995487 11.115594 10.11489 11.998654 9.0019531 12 L 9.0039062 14 C 9.7330113 13.999103 10.409972 13.784291 11 13.4375 L 11 15.832031 A 1.0001 1.0001 0 0 0 11 16.158203 L 11 19 L 11 19.544922 C 10.53433 19.775688 10.05763 20 9.5 20 C 7.6963955 20 6.2496408 18.652222 6.0449219 16.904297 A 1.0001 1.0001 0 0 0 5.6445312 16.214844 C 4.6481295 15.482432 4 14.327105 4 13 C 4 11.598815 4.7246346 10.392988 5.8105469 9.6816406 C 6.2276287 10.337914 6.7833892 10.916519 7.5 11.330078 L 8.5 9.5976562 C 7.8796927 9.2396745 7.4474748 8.6957359 7.2089844 8.0820312 A 1.0001 1.0001 0 0 0 7.1855469 8 C 7.0449376 7.6024542 6.9871315 7.1827317 7.015625 6.7695312 C 7.0230903 6.6612728 7.0432757 6.5542362 7.0625 6.4472656 C 7.076659 6.3735269 7.0914327 6.2997442 7.1113281 6.2265625 C 7.1310767 6.1505802 7.1498827 6.0745236 7.1757812 6 C 7.2330841 5.8402322 7.3023195 5.6825058 7.3886719 5.5292969 C 7.5187762 5.2975857 7.6804734 5.0773393 7.8789062 4.8789062 C 8.3733162 4.3844964 8.9892096 4.1023458 9.6269531 4.0273438 C 9.7439583 4.0135832 9.860992 4.0140246 9.9765625 4.0253906 z"></path></svg> AI</button>');
        //  elementor
        //todo
        //  oxy
        //todo

        //  breakdance
        //soon // jQuery('.undo-redo-top-bar-section',window.parent.document).before('<div class="topbar-section topbar-section-bl"><button type="button" class="v-btn v-btn--outlined theme--light elevation-0 v-size--default breakdance-toolbar-button ab-ai-launch" style="height: 37px; margin-left: 3px; margin-right: 3px;"><span class="v-btn__content"> AI </span></button></div>');

        // bricks
        //todo

    },2000);
});






/**
 * Copies the specified text to the clipboard.
 * @param {String} text The text to copy.
 */

 function copyText(text) {
    if (!navigator.clipboard) {
    console.info('Cant copy to navigator.clipboard, you are probably on localhost where window.clipboard isnt allowed.');
    return;
}

  navigator.clipboard.writeText(text).then(function() {
    alert('Copied!');
  }, function(err) {
    console.info('Cant copy, you are probably on localhost where window.clipboard isnt allowed. Full error: ', err);
  });
}



async function callOpenAI(abAiType,outputSelector) {

    // send text and ai response required type
    var abAiType = jQuery('input[type="radio"][name="abaitype"]:checked')[0]['value'];
    if(abAiType == 'rewrite')
        var query = jQuery('[name="inputText"]').val().trim();
    else
    {
        var cleanedHtml = getAbPageContent();
         
        query = cleanedHtml;
    }
    sendToOpenAI(query,abAiType,outputSelector);

}

function getAbPageContent(){

    
    var selectorList = [
        '.wp-block-post-content',
        '[itemprop="mainContentOfPage"]',
        '[role="main"]',
        'main',
        '#mainContent',
        'article',
        '.article',
        '.content',
        '#content',
        '.entry-content',
        'body',
        ] 
    var abPageContent = false;
    jQuery.each( selectorList, function( key, selector ) { // run through the selectors until we find one, cant fail with good ol body at the end
        if(jQuery(selector).length)
        {
            console.info('found with selector: ' + selector);
            abPageContent = jQuery(selector).clone(); // Clone the content to avoid modifying the actual page
            return false; // break loop
        }
    });

    // Remove non understandable things, media, and links
    abPageContent.find('source, header,footer, iframe, #wpadminbar,script,style,#ab-ai-form,meta,script,style,link, #wpadminbar').remove();

    // remove classes and styles from html
    abPageContent.find('*').removeAttr('style').removeAttr('data-*').removeAttr('data-node');
    // remove spaces between html elements
    abPageContent.find('*').contents().filter(function() {
        return this.nodeType === 3 && !/\S/.test(this.nodeValue);
    }).remove();

    // Convert the cleaned content to HTML
    var cleanedHtml = abPageContent.html();

    return cleanedHtml;
}



/**
 * Sends a query to OpenAI and returns the response.
 * @param {string} query - The query to send to OpenAI.
 * @param {string} abAiType - The type of AI to use. (rewrite, suggestions, magic)
 * @param {string} outputSelector - The selector for the output element.
 */
function sendToOpenAI(query,abAiType,outputSelector) {
    jQuery("#ai-suggestions p")
    jQuery("#ai-suggestions").slideDown()
    if(!jQuery("#ai-suggestions p.ai-loading").length) jQuery("#ai-suggestions").append('<p class="ai-loading">Generating AI Suggestions âœ¨</p>')

    context = getAbPageContent();
    //convert to markdown w turndown
    var turndownService = new TurndownService();
    var markdown = turndownService.turndown(context);

    jQuery.ajax({
        url: bt_ajaxurl,
        type : 'post',
        data : {
            'action': 'send_to_openai',
            'input_text': query,
            'type': abAiType,
            'title': abAiType,
            'context':markdown,
            'domain': btab_vars.domain,
        },
        success: function( response ) {
            if(response && typeof response.error !== 'undefined')
            {
                if(typeof response.error.message !== 'undefined')
                {
                    jQuery(outputSelector).parent().empty().html('<small><strong>' + response.error.message + '</strong></small>');
                }
                else
                {
                    jQuery(outputSelector).parent().empty().html('<small><strong>' + response.error + '</strong></small>');
                }
            }
            else
            {
                console.log(response.choices[0]['message']['content']);
                var outt = '';
                if(abAiType == 'suggestions')
                {
                    //trim the content before the first square bracket and after the last square bracket
                    respo = response.choices[0]['message']['content'];
                    // remove ```json
                    respo = respo.replace(/```json/g, '');
                    // remove ```
                    respo = respo.replace(/```/g, '');

                    var ideas = JSON.parse(respo);

                    console.log(ideas);
                    //remove ```json and ``` from response
                    outt += "<h3>CRO Page Score: " + ideas.overall_page_rating + "%</h3><h4> You should consider adding:</h4><p> " + ideas.missing_content +"</p>";
                    jQuery.each(ideas.suggestions,function(index, content){
        
                        outt += "<div class='ai-option'><h4>" +  content.test_name + "</h4><p> " + content.reason_why +"</p><p>Original text:<BR><strong>" + content.original_string + "</strong></p><p>Suggestions:</p>";
                        jQuery.each(content.suggestions,function(index, suggestion){
        
                            outt += "<p class='ai-suggestion-item'>" + suggestion + "</p>";
                        });
                        outt += "</div>";
                    });
                }
                else if(abAiType == 'magic')
                {
                    outt='';
                    jQuery("#ai-suggestions-list").empty();
                    suggestions = JSON.parse(response.choices[0]['message']['content']).suggestions;
                    jQuery.each(suggestions,function(index, choice){
                        outt += "<li class='ai-suggestion-item'>" + choice + "</li>";
                    });                  
                    jQuery("#ai-suggestions p").remove();
                    jQuery("#ai-suggestions-list").append(outt);
                    jQuery("#ai-suggestions-list").slideDown(1000);
                    jQuery("#ai-suggestions").prepend('<p>AI Suggestions âœ¨ <small>Click to add to test variations & edit.</small></p>').slideDown(1000);
                }
                else
                {
                    suggestions = JSON.parse(response.choices[0]['message']['content']);
                    jQuery.each(suggestions.suggestions,function(index, choice){
                        outt += "<div class='ai-option'>" + choice +"</div>";
                    });                  
                }
                jQuery(outputSelector).html(outt);
                }
                jQuery('.ai-loading').hide();
        }
    });
}




function loadingMessage(){

    var loadingMessages = [
    "Loading, please wait...",
    "Fetching unicorns from the cloud...",
    "Initiating data transfer...",
    "Preparing to dazzle you...",
    "Calculating the meaning of life...",
    "Polishing up the pixels...",
    "Preparing to amaze you...",
    "Transmitting awesomeness...",
    "Crafting your results...",
    "Preparing for blast off...",
    "Assembling the pieces...",
    "Elevating your experience...",
    "Generating quantum states...",
    "Refining your results...",
    "Transforming data into gold...",
    "Accelerating electrons...",
    "Integrating over functions...",
    "Deconstructing the code...",
    "Tuning the engine...",
    "Synchronizing the clocks...",
    "Translating into ones and zeros...",
    "Archiving history...",
    "Empowering your experience...",
    "Conducting the orchestra...",
    "Compiling the modules...",
    "Scaling the heights...",
    "Breaking the sound barrier...",
    "Hyperspace travel engaged...",
    "Charging the capacitors...",
    "Aligning the planets...",
    "Distributing the load...",
    "Mapping the unknown...",
    "Decompressing the data...",
    "Filtering out the noise...",
    "Quantum entangling particles...",
    "Deciphering the glyphs...",
    "Optimizing the algorithm...",
    "Defragging the disk...",
    "Unleashing the power...",
    "Leveraging the network...",
    "Expanding the universe...",
    "Ruling out the impossible...",
    "Crunching the numbers...",
    "Synthesizing reality...",
    "Solving the puzzle...",
    "Unearthing the truth...",
    "Breaking the deadlock...",
    "Refining the solution...",
    ];

    return loadingMessages[Math.floor(Math.random()*loadingMessages.length)];
}


/*



jQuery('.fl-builder-bar-actions').append('<button class="ab-ai-launch fl-builder-button"> AI </button>');



*/












/**
 * ABST Magic Bar
 * Displays a modal at the top of the website and pushes down content
 */


function selectorDetection(){
    
    if(jQuery('body').hasClass('abst-selector-detection'))
        return; // only once
    
    jQuery('body').css('pointer-events', 'auto').addClass('abst-selector-detection');
    jQuery('img').css('pointer-events', 'auto');
    // Create the  box elements once, outside the event handlers
    var box = jQuery('<div id="selector-box"></div>');
    jQuery('body').append(box);

// Track the current element being hovered
var currentElement = null;
var hoverTimer = null;

// Add a debounce mechanism at the start of your code
var selectorHoverDebounce = null;
var lastProcessedElement = null;



jQuery('body').on('mouseover', function(e){
    // Clear any existing debounce timer
    if (selectorHoverDebounce) {
        clearTimeout(selectorHoverDebounce);
    }
    
    // Set a small delay before processing
    selectorHoverDebounce = setTimeout(function() {
        showBar = true;
        if(!jQuery('#abst-magic-bar').is(':visible'))
            showBar = false;

        var element = e.target;
        
        // Skip if hovering over the box or their children
        if (element.id === 'selector-box' || 
            jQuery.contains(document.getElementById('selector-box'), element)) {
                showBar = false;
        }
        
        if(jQuery(element).parents('.media-modal.wp-core-ui').length > 0)//not inside media modal
        showBar = false;
        
        // If we're already showing for this element, don't do anything
        if (currentElement === element) {
            showBar = false;
        }
        
        currentElement = element;
        var selector = getUniqueSelector(element);
    
        //filters
        var elementType = false;
        
        //dont show if on the abst-magic-bar or any parent is abst-magic-bar
        if(element.id !== 'abst-magic-bar') {
            // Check all parents for the ID
            var parent = element.parentElement;
            while(parent) {
                if(parent.id == 'abst-magic-bar')
                    showBar = false;
                parent = parent.parentElement;
            }
        }

        if(!showBar)
        {
            box.hide();
            return;
        }

        //fin if elementr has inntertext or is an image
        if(element.tagName == 'IMG' || element.tagName == 'SVG')
            elementType = 'image';

        // Check if element has direct text (not just from child elements)
        var hasDirectText = false;
        for (var i = 0; i < element.childNodes.length; i++) {
            var node = element.childNodes[i];
            if (node.nodeType === 3 && node.textContent.trim() !== '') { // Text node
                hasDirectText = true;
                break;
            }
        }

        // Check for text elements that typically contain direct text content
        var textTags = ['P', 'H1', 'H2', 'H3', 'H4', 'H5', 'H6', 'SPAN', 'A', 'BUTTON', 'LABEL', 'LI', 'TD', 'TH', 'STRONG', 'EM', 'B', 'I'];
        if (hasDirectText || (textTags.includes(element.tagName) && element.textContent && element.textContent.trim() !== '')) {
            elementType = 'text';
        }

        //if element has bg img
        if(element.style.backgroundImage && element.style.backgroundImage !== 'none')
            elementType = 'bgimage';

        if(!elementType)
            return;

        // Clear any existing timer
        if (hoverTimer) {
            clearTimeout(hoverTimer);           
            hoverTimer = null;
        }
        //add elementtype to element
        element.setAttribute('data-abmagictestelementtype', elementType);
        
        // Get position of element to display a box around
        var rect = element.getBoundingClientRect();
        box.css({
            zIndex: '158000',
            top: rect.top + window.scrollY - 10,
            left: rect.left + window.scrollX - 10,
            width: rect.width + 20,
            height: rect.height + 20,
            borderRadius: '10px'
        });
        box.show();
        // Improved element comparison to avoid flickering
        if (lastProcessedElement === element) {
            return;
        }
        
        lastProcessedElement = element;

        
        }, 50); // Small delay to debounce
    });
        
    // Add a mouseleave handler to hide the tooltip and box when leaving the element
    jQuery('body').on('mouseout', function(e) {
        if (jQuery(e.relatedTarget).closest(jQuery(this)).length === 0) {
            // Only hide when truly leaving the element (not entering a child)
            if (hoverTimer) {
                clearTimeout(hoverTimer);
            }
            
            // Add a small delay before hiding
            hoverTimer = setTimeout(function() {
                box.hide();
                lastProcessedElement = null;
            }, 150);
        }
    });
    window.magicLastFocus = null;
    jQuery('body').on('click', function(e){
        
        // if the magic bar is not visible, do nothing
        if(!jQuery('#abst-magic-bar').is(':visible'))
            return;

        var element = e.target; 
        //if it has data-abmagictestelementtype
        if(!element.getAttribute('data-abmagictestelementtype'))
            return;

        e.preventDefault();
    
        var selector = getUniqueSelector(element);
        console.log('unique selector is ' + selector);
    
        //modes image or text
        //if its an image
        if(e.target.tagName == 'IMG')
        {
            console.log('clicked on image');
            //get unique selector for this page
            width = jQuery(element).width();
            height = jQuery(element).height();
            console.log('meniu popop now    ');
            setMagicBar(selector, jQuery(element).attr('src'),false, 'image');
        }
        else if(e.target.tagName == 'SVG')
        {
            console.log('clicked on svg');
            width = jQuery(element).width();
            height = jQuery(element).height();
            var imgSrc = jQuery(element).attr('src');
            jQuery(element).attr('src', 'https://placekeanu.com/'+width+'/'+height+'/');
            //remove srcset so its not broken
            jQuery(element).removeAttr('srcset');
            jQuery(element).attr('alt', 'SWAPPED TEXT STRING');
            setMagicBar(selector, imgSrc,false, 'image');
            setTimeout(function(){
                jQuery(element).attr('src', imgSrc);
            }, 800);
        }
        else
        {
            console.log('clicked on txt');
            if(jQuery(selector).text() != '')
            {
                sText = jQuery(selector).text();
                //create newtext that is the same number of chars s current text
                var newText = 'Split Test text here! Depending on how much text you have you will see more of this generic filler text. But once you add your variations, you will see your own text instead of this. Test text here! Depending on how much text you have you will see more of this generic filler text. But once you add your variations, you will see your own text instead of this. Test text here! Depending on how much text you have you will see more of this generic filler text. But once you add your variations, you will see your own text instead of this. Test text here! Depending on how much text you have you will see more of this generic filler text. But once you add your variations, you will see your own text instead of this. ';
                newText = newText.substring(0, sText.length);
                setMagicBar(selector, sText);
                jQuery(selector).text(newText);
                setTimeout(function(){
                    jQuery(selector).text(sText);
                }, 800);
            }
            else
            {
                console.log('no text');
            }
            //select and swap
        }
        window.magicLastFocus = element;
    });

}
function setMagicBar(selector, selectorText,goal = false,type = 'text') {
    //check we have an active element
    console.log(window.magicLastFocus);
    if(window.magicLastFocus && (window.magicLastFocus.className.includes('abst-goal-input-value')))
    {
        console.log('goal input value');
        //set value
        if(window.magicLastFocus.value !== '')
            if(!confirm('This will replace the current goal selector. Are you sure?'))
                return;
        window.magicLastFocus.value = selector;
        return;
    }

    //find active element
    if(jQuery(".abst-element-column.active").length < 1)
        jQuery('.abst-element-column').first().addClass('active');
    

    //check the selector has under 3 results
    if(jQuery(selector).length > 3)
    {
        console.log('Selector has more than 3 results, please choose a more specific selector, or click the element.');
        return;
    }

    jQuery('.active .abst-element-title-type').text(" " + type);
    if(jQuery('.active .abst-magic-element-selector').val() != '')
        if(!confirm('This will replace the current selector. Are you sure?'))
            return;
    jQuery('.active .abst-magic-element-selector').val(selector);
    jQuery('.active .abst-variant').val('').hide();
    jQuery('.active .abst-magic-a-value').val(selectorText.trim());
    jQuery('.active .abst-magic-a-value, .active .abst-magic-b-value').show();
    jQuery('#ai-suggestions').hide();
    jQuery('#ai-suggestions-list').empty();

    if(goal)
        jQuery('#abst-goal').val(goal).trigger('change');
    if(type == 'text'){
        sendToOpenAI(selectorText,'magic','#ai-suggestions-list');
    }
    if(type == 'image'){
        jQuery('#ai-suggestions').slideUp();
        //on .abst-variant input click, open media modal 
        //set up click listener for .abst-variant input
        //if we dont already have a listener set oen up
        if(!jQuery('.abst-variant').data('hasListener')){
            jQuery('.abst-variant').data('hasListener', true);
            
            jQuery('.abst-variant').on('click', function(){ 
                if(jQuery(this).parents('.abst-element-column').find('.abst-element-title-type').text().toLowerCase().trim() != 'image')
                    return;

            var actualElement = jQuery(jQuery(this).parents('.abst-element-column').find('.abst-magic-element-selector').val())
            if(jQuery(this).val() != ''){
                console.log('setting image already set');
                if(jQuery(actualElement).attr('abogimg') == '')
                    jQuery(actualElement).attr('abogimg', jQuery(this).val());
                //show background image in plkace for 2s then hide
                jQuery(actualElement).attr('src', jQuery(this).val()).removeAttr('srcset');
                setTimeout(function(){
                    jQuery(actualElement).attr('src', jQuery(actualElement).attr('abogimg'));
                }, 2000);
                return;
            }
            // Create the media frame.
            var file_frame = wp.media.frames.file_frame = wp.media({
                title: 'Choose a variation image',
                button: {
                    text: 'Add image to test'
                },
                multiple: false  // Set to true to allow multiple file selection
            });
            
            // When an image is selected, show media frame
            file_frame.on( 'select', function() {
                // We set multiple to true so get all images from the uploader
                var attachments = file_frame.state().get('selection').toJSON();
                //add to magic bar
                console.log(attachments);
                for(var i = 0; i < attachments.length; i++)
                {
                    jQuery(".active .abst-variant").each(function(){
                        if(jQuery(this).val() == '')
                        {
                            jQuery(this).val(attachments[i].url).css('transition', '1s').css('background-color', 'lightgreen').trigger('input').parents('.abst-magic-variants').show();
                            if(!jQuery(actualElement).attr('abogimg'))
                                jQuery(actualElement).attr('abogimg', jQuery(actualElement).attr('src'));                                                                                                                               
                            jQuery(actualElement).attr('src', jQuery(this).val()).removeAttr('srcset');
                            return false;
                        }
                    });
                }
                setTimeout(function(){
                    console.log('hiding image');
                    jQuery(actualElement).css('background-color', 'transparent');
                    jQuery(actualElement).attr('src', jQuery(actualElement).attr('abogimg'));
                }, 2000);
            });
            file_frame.open();
        });
        }
    }
}

function getUniqueSelector(element) {
    // If not an element, return null
    if (!(element instanceof Element)) return null;
    
    // If element has an ID, use that (simplest case)
    if (element.id) {
        return '#' + element.id;
    }
    
    // Try to find a simple selector with classes
    const simpleSelector = getSimpleSelector(element);
    if (simpleSelector && jQuery(simpleSelector).length === 1) {
        return simpleSelector;
    }
    
    // If we need to use a path, generate the shortest possible path
    return generateShortPath(element);
}

// Helper function to get a simple selector for an element
function getSimpleSelector(element) {
    const tag = element.tagName.toLowerCase();
    
    // Try tag with classes
    if (element.classList.length > 0) {
        // Get the most specific class (usually the last one is most specific)
        const classes = Array.from(element.classList).sort((a, b) => {
            // Prioritize classes that are less common in the document
            const aCount = jQuery('.' + a).length;
            const bCount = jQuery('.' + b).length;
            return aCount - bCount;
        });
        
        // Try with just one class first
        for (const cls of classes) {
            const selector = tag + '.' + cls;
            if (jQuery(selector).length === 1) {
                return selector;
            }
        }
        
        // Try with two classes if needed
        if (classes.length >= 2) {
            for (let i = 0; i < classes.length - 1; i++) {
                for (let j = i + 1; j < classes.length; j++) {
                    const selector = tag + '.' + classes[i] + '.' + classes[j];
                    if (jQuery(selector).length === 1) {
                        return selector;
                    }
                }
            }
        }
    }
    
    // Try with a single important attribute
    const importantAttrs = ['href', 'src', 'alt', 'title', 'name', 'value', 'type', 'role'];
    for (const attrName of importantAttrs) {
        if (element.hasAttribute(attrName)) {
            const attrValue = element.getAttribute(attrName);
            if (attrValue && attrValue.length < 100) { // Skip very long attribute values
                const selector = tag + '[' + attrName + '="' + attrValue.replace(/"/g, '\\"') + '"]';
                if (jQuery(selector).length === 1) {
                    return selector;
                }
            }
        }
    }
    
    return null;
}

// Generate a short path to the element
function generateShortPath(element) {
    let path = [];
    let current = element;
    
    // Walk up the DOM tree until we find an ID or reach the body
    while (current && current !== document.body) {
        // If we find an element with ID, use that and stop
        if (current.id) {
            path.unshift('#' + current.id);
            break;
        }
        
        // Try to create a unique selector for this level
        const tag = current.tagName.toLowerCase();
        let selector = tag;
        
        // Add a class if it helps make it more specific but not too specific
        if (current.classList.length > 0) {
            // Find the most specific useful class
            for (const cls of current.classList) {
                const testSelector = tag + '.' + cls;
                const matches = jQuery(testSelector, current.parentNode).length;
                if (matches === 1) {
                    selector = testSelector;
                    break;
                }
            }
        }
        
        // If we still don't have a unique selector at this level, add nth-child
        if (jQuery(selector, current.parentNode).length > 1) {
            const index = Array.from(current.parentNode.children).indexOf(current) + 1;
            selector += ':nth-child(' + index + ')';
        }
        
        path.unshift(selector);
        current = current.parentNode;
        
        // Check if our path is already unique
        const testPath = path.join(' > ');
        if (jQuery(testPath).length === 1) {
            return testPath;
        }
    }
    
    return path.join(' > ');
}






function abst_magic_bar(options = {}) {

    // include turndown
    var script = document.createElement('script');
    script.src = btab_vars.plugins_uri + "js/turndown.js";
    document.head.appendChild(script);
    script.onload = function() {
        console.log('Turndown script loaded to create context');
    };

    selectorDetection();
    // Default options
    const defaults = {
        height: '250px',
        backgroundColor: '#f5f5f5',
        borderColor: '#ddd',
        content: '',
        closeButton: true,
        animation: true,
        onOpen: null,
        onClose: null,
        // Default values for the form elements
        selector: '.selector',
        goal: 'Woo Order Recieved',
        versionA: 'Test anything WordPress',
        versionB: 'Helping WordPres business sell more',
        versionC: 'Your private testing cloud'
    };

    // Merge defaults with user options
    const settings = Object.assign({}, defaults, options);

    // Check if the magic bar already exists
    if (document.getElementById('abst-magic-bar')) {
        return;
    }

    // Create the magic bar element
    const magicBar = document.createElement('div');
    magicBar.id = 'abst-magic-bar';
    magicBar.className = 'abst-magic-bar';
    
    // Add no-animation class if animation is disabled
    if (!settings.animation) {
        magicBar.classList.add('no-animation');
    }

    var rolesHtml = '';
    //    foreach abst_magic_data.roles
    jQuery.each(abst_magic_data.roles, function(key, value) {
        //if key in array abst_magic_data.defaults
        if (abst_magic_data.defaults.includes(key))
            rolesHtml += '<div class="abst-user-role"><input type="checkbox" name="roles[]" value="' + key + '" checked> ' + value + '</div>';
        else
            rolesHtml += '<div class="abst-user-role"><input type="checkbox" name="roles[]" value="' + key + '"> ' + value + '</div>';
    });
    // Add content
    magicBar.innerHTML = `
        <div class="abst-magic-bar-content">
            <div class="abst-magic-bar-header">
                <input id="abst-magic-bar-title" class="abst-magic-bar-title" value="New Magic Test">
                <div id="abst-magic-bar-actions" class="abst-magic-bar-actions">
                <button id="abst-magic-bar-start" class="abst-magic-bar-start">Start Test</button>
                <!-- one day <button id="abst-magic-bar-save" class="abst-magic-bar-save">Save Draft</button>-->
                </div>
            </div>
            
            <div class="abst-magic-bar-container">
                <div class="abst-elements-scroll-container">
                    <!-- First Element Column -->
                    <div class="abst-element-column">
                        <div class="abst-element-title">ELEMENT 1 <span class="abst-element-title-type"></span></div>
                        <div class="abst-section">
                            <label for="abst-magic-element-selector small">Element Selector</label>
                            <input type="text"  class="abst-magic-element-selector" value="" placeholder="Click an element to add selector">
                        </div>
                        <div class="abst-section">
                            <label for="abst-magic-a-value">Variation A (Original)</label>
                            <input type="text" readonly class="abst-variant abst-magic-a-value" value="" placeholder="This is the text that will be tested">
                        </div>
                        <div class="abst-section">
                            <label for="abst-magic-b-value">Variation B</label>
                            <input type="text" class="abst-variant abst-magic-b-value" value="">
                        </div>
                        <div class="abst-section abst-hidden">
                            <label for="abst-magic-c-value">Variation C</label>
                            <input type="text" class="abst-variant abst-magic-c-value" value="">
                        </div>
                        <div class="abst-section abst-hidden">
                            <label for="abst-magic-d-value">Variation D</label>
                            <input type="text"  class="abst-variant abst-magic-d-value" value="">
                        </div>
                        <div class="abst-section abst-hidden">
                            <label for="abst-magic-e-value">Variation E</label>
                            <input type="text"  class="abst-variant abst-magic-e-value" value="">
                        </div>
                        <div class="abst-section abst-hidden">
                            <label for="abst-magic-f-value">Variation F</label>
                            <input type="text"  class="abst-variant abst-magic-f-value" value="">
                        </div>
                    </div>
                    <div class="abst-element-column-hidden">
                        <div class="abst-element-title">ELEMENT 2 <span class="abst-element-title-type"></span></div>
                        <button class="abst-magic-element-remove">X</button>
                        <div class="abst-section">
                            <input type="text" class="abst-magic-element-selector" value="" placeholder="Click an element to add selector">
                        </div>
                        <div class="abst-section">
                            <div class="abst-blue-header">VARIATION A (Original)</div>
                            <input type="text" readonly class="abst-variant abst-magic-a-value" value="">
                        </div>
                        <div class="abst-section">
                            <div class="abst-blue-header">VARIATION B</div>
                            <input type="text" class="abst-variant abst-magic-b-value" value="">
                        </div>
                        <div class="abst-section abst-hidden">
                            <div class="abst-blue-header">VARIATION C</div>
                            <input type="text" class="abst-variant abst-magic-c-value" value="">
                        </div>
                        <div class="abst-section abst-hidden">
                            <div class="abst-blue-header">VARIATION D</div>
                            <input type="text" class="abst-variant abst-magic-d-value" value="">
                        </div>
                        <div class="abst-section abst-hidden">
                            <div class="abst-blue-header">VARIATION E</div>
                            <input type="text"  class="abst-variant abst-magic-e-value" value="">
                        </div>
                        <div class="abst-section abst-hidden">
                            <div class="abst-blue-header">VARIATION F</div>
                            <input type="text"  class="abst-variant abst-magic-f-value" value="">
                        </div>
                    </div>

                    <div class="abst-element-column-hidden">
                        <div class="abst-element-title">ELEMENT 3 <span class="abst-element-title-type"></span></div>
                        <div class="abst-section">
                            <input type="text" class="abst-magic-element-selector" value="" placeholder="Click an element to add selector">
                        </div>
                        <button class="abst-magic-element-remove">X</button>
                        <div class="abst-section">
                            <div class="abst-blue-header">VARIATION A (Original)</div>
                            <input type="text" readonly class="abst-variant abst-magic-a-value" value="">
                        </div>
                        <div class="abst-section">
                            <div class="abst-blue-header">VARIATION B</div>
                            <input type="text" class="abst-variant abst-magic-b-value" value="">
                        </div>
                        <div class="abst-section abst-hidden">
                            <div class="abst-blue-header">VARIATION C</div>
                            <input type="text" class="abst-variant abst-magic-c-value" value="">
                        </div>
                        <div class="abst-section abst-hidden">
                            <div class="abst-blue-header">VARIATION D</div>
                            <input type="text" class="abst-variant abst-magic-d-value" value="">
                        </div>
                        <div class="abst-section abst-hidden">
                            <div class="abst-blue-header">VARIATION E</div>
                            <input type="text"  class="abst-variant abst-magic-e-value" value="">
                        </div>
                        <div class="abst-section abst-hidden">
                            <div class="abst-blue-header">VARIATION F</div>
                            <input type="text"  class="abst-variant abst-magic-f-value" value="">
                        </div>
                    </div>
                    <div class="abst-element-column-hidden">
                        <div class="abst-element-title">ELEMENT 4 <span class="abst-element-title-type"></span></div>
                        <div class="abst-section">
                            <input type="text" class="abst-magic-element-selector" value="" placeholder="Click an element to add selector">
                        </div>
                        <div class="abst-section">
                            <div class="abst-blue-header">VARIATION A (Original)</div>
                            <input type="text" readonly class="abst-variant abst-magic-a-value" value="">
                        </div>
                        <div class="abst-section">
                            <div class="abst-blue-header">VARIATION B</div>
                            <input type="text" class="abst-variant abst-magic-b-value" value="">
                        </div>
                        <div class="abst-section abst-hidden">
                            <div class="abst-blue-header">VARIATION C</div>
                            <input type="text" class="abst-variant abst-magic-c-value" value="">
                        </div>
                        <div class="abst-section abst-hidden">
                            <div class="abst-blue-header">VARIATION D</div>
                            <input type="text" class="abst-variant abst-magic-d-value" value="">
                        </div>
                        <div class="abst-section abst-hidden">
                            <div class="abst-blue-header">VARIATION E</div>
                            <input type="text"  class="abst-variant abst-magic-e-value" value="">
                        </div>
                        <div class="abst-section abst-hidden">
                            <div class="abst-blue-header">VARIATION F</div>
                            <input type="text"  class="abst-variant abst-magic-f-value" value="">
                        </div>
                        <button class="abst-magic-element-remove">X</button>
                    </div>
                    
                    <!-- Fifth Element Column -->
                    <div class="abst-element-column-hidden">
                        <div class="abst-element-title">ELEMENT 5 <span class="abst-element-title-type"></span></div>
                        <button class="abst-magic-element-remove">X</button>
                        <div class="abst-section">
                            <input type="text" class="abst-magic-element-selector" value="" placeholder="Click an element to add selector">
                        </div>
                        <div class="abst-section">
                            <div class="abst-blue-header">VARIATION A (Original)</div>
                            <input type="text" readonly class="abst-variant abst-magic-a-value" value="">
                        </div>
                        <div class="abst-section">
                            <div class="abst-blue-header">VARIATION B</div>
                            <input type="text" class="abst-variant abst-magic-b-value" value="">
                        </div>
                        <div class="abst-section abst-hidden">
                            <div class="abst-blue-header">VARIATION C</div>
                            <input type="text" class="abst-variant abst-magic-c-value" value="">
                        </div>
                        <div class="abst-section abst-hidden">
                            <div class="abst-blue-header">VARIATION D</div>
                            <input type="text" class="abst-variant abst-magic-d-value" value="">
                        </div>
                        <div class="abst-section abst-hidden">
                            <div class="abst-blue-header">VARIATION E</div>
                            <input type="text"  class="abst-variant abst-magic-e-value" value="">
                        </div>
                        <div class="abst-section abst-hidden">
                            <div class="abst-blue-header">VARIATION F</div>
                            <input type="text"  class="abst-variant abst-magic-f-value" value="">
                        </div>
                    </div>
                    <div class="abst-element-column abst-add-element-column">
                        <button class="abst-add-element-button">+ ADD ELEMENT</button>
                    </div>
                </div>
                
                <!-- settings Column -->
                <div class="abst-settings-column">

                    <div class="abst-settings-title">Targeting</div>
                    <div class="abst-settings-header closed" tabindex="0" aria-expanded="false">User Roles</div>
                    <div id="abst-user-roles-container" class="abst-hidden">
                        ${rolesHtml}
                    </div>
                    
                    <div class="abst-settings-header closed" tabindex="0" aria-expanded="false">Device Size</div>
                    <div class="abst-targeting-option abst-hidden">
                        <select id="abst-device-size" class="abst-select">
                            <option value="all" selected>All Sizes</option>
                            <option value="desktop">Desktop</option>
                            <option value="tablet">Tablet</option>
                            <option value="mobile">Mobile</option>
                        </select>
                    </div>
                    
                    <div class="abst-settings-header closed" tabindex="0" aria-expanded="false">URL Filtering</div>
                    <div class="abst-targeting-option abst-hidden">
                        <input type="text" id="abst-url-query" class="abst-url-input" placeholder="utm_source=Google">
                        <div class="abst-url-help">Test on traffic with matching URL query strings, or use a * to search the entire URL for a specific string</div>
                    </div>
                    
                    <div class="abst-settings-header closed" tabindex="0" aria-expanded="false">Traffic Allocation Percentage</div>
                    <div class="abst-targeting-option abst-hidden">
                        <input type="number" id="abst-traffic-percentage" class="abst-number-input" value="100" min="1" max="100">
                    </div>
                    
                </div>
                <!-- Goals Column -->
                <div class="abst-goals-column">

                    <div class="abst-goals-title">Goals</div>
                    <div class="abst-goals-container">

                    </div>

                    <div class="abst-button-container">
                        <button class="abst-add-goal-button">+ Add Goal</button>
                    </div>
                </div>
            </div>
            <div id="ai-suggestions">
                <ul id="ai-suggestions-list"></ul>
            </div>
        </div>
    `;

    get_abst_pageselector();

    // Add close button if enabled
    if (settings.closeButton) {
        const closeButton = document.createElement('div');
        closeButton.className = 'abst-magic-bar-close';
        closeButton.innerHTML = 'Ã—';
        closeButton.addEventListener('click', function() {
            close_abst_magic_bar();
        });
        magicBar.appendChild(closeButton);
    }

    // Add the magic bar to the body
    document.body.appendChild(magicBar);
 
    jQuery(".abst-goals-container").append(abst_magic_data.goals).append('<input type="text" class="abst-goal-input-value" placeholder="">');


    // add time date in nice format to new test title
    // Format date as 'May 2 11:30pm'
    const now = new Date();
    const months = ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"];
    let hours = now.getHours();
    const minutes = now.getMinutes().toString().padStart(2, '0');
    const ampm = hours >= 12 ? 'pm' : 'am';
    hours = hours % 12;
    hours = hours ? hours : 12; // the hour '0' should be '12'
    const formatted = `${months[now.getMonth()]} ${now.getDate()} ${hours}:${minutes}${ampm}`;
    jQuery('.abst-magic-bar-title').val('Magic Test ' + formatted);

    jQuery('body').on('click keydown', '.abst-settings-header', function(event) {
        if(event.type === 'keydown' && event.key !== 'Enter')
            return;
        
        if(jQuery(this).hasClass('closed')){
            jQuery(this).removeClass('closed');
            jQuery(this).next().removeClass('abst-hidden');
        }else{
            jQuery(this).addClass('closed');
            jQuery(this).next().addClass('abst-hidden');
        }
    });

    
    // Create a spacer element to push down the content
    const spacer = document.createElement('div');
    spacer.id = 'abst-magic-bar-spacer';
    spacer.style.height = jQuery('#abst-magic-bar').height() + 'px';  //height of abst-magic-bar;
    spacer.style.display = 'none';
    document.body.insertBefore(spacer, document.body.firstChild);

    // Show the magic bar
    setTimeout(() => {
        jQuery('html').addClass('doing-abst-magic-bar');

        magicBar.style.transform = 'translateY(0)';
        spacer.style.display = 'block';

        window.abspacerInterval = setInterval(() => {
            jQuery('#abst-magic-bar-spacer').css('transition', 'height 2s ease in out');
            jQuery('#abst-magic-bar-spacer').height(jQuery('#abst-magic-bar').height() + 'px');
        }, 300);
        
        // Call onOpen callback if provided
        if (typeof settings.onOpen === 'function') {
            settings.onOpen();
        }
        
        // Add event listeners for the selector field
        const selectorField = document.getElementById('abst-selector');
        if (selectorField) {
            selectorField.addEventListener('blur', function() {
                // You could add validation or other functionality here
                console.log('Selector updated:', this.value);
            });
        }
    }, 10);

    // Function to close the magic bar
    window.close_abst_magic_bar = function() {
        jQuery('html').removeClass('doing-abst-magic-bar');

        const magicBar = document.getElementById('abst-magic-bar');
        const spacer = document.getElementById('abst-magic-bar-spacer');

        clearInterval(window.abspacerInterval);
        
        if (magicBar) {
            magicBar.style.transform = 'translateY(-100%)';
            
            setTimeout(() => {
                if (magicBar.parentNode) {
                    magicBar.parentNode.removeChild(magicBar);
                }
                
                if (spacer && spacer.parentNode) {
                    spacer.parentNode.removeChild(spacer);
                }
                
                // Call onClose callback if provided
                if (typeof settings.onClose === 'function') {
                    settings.onClose();
                }
            }, settings.animation ? 300 : 0);

            //stop the selector
            const selectorField = document.getElementById('abst-selector');
            if (selectorField) {
                selectorField.removeEventListener('blur', function() {
                    // You could add validation or other functionality here
                    console.log('Selector updated:', this.value);
                });
            }
        }
    };
}

// jQuery wrapper for the function
(function($) {
    $(function() {


        jQuery("body").on('click','.abst-add-element-button',function(){
            //find and then show fiorst abst-hidden .abst-element-column
            newShowElement = jQuery('.abst-element-column-hidden').first();
            newShowElement.removeClass('abst-element-column-hidden').addClass('abst-element-column');
            jQuery('#ai-suggestions').hide();
            setTimeout(function() {
                newShowElement.addClass('active');
            }, 100);
            jQuery('.abst-elements-scroll-container').animate({
                scrollLeft: '+=280px'
            }, 1000);
        });
        // remove element
        jQuery("body").on('click','.abst-magic-element-remove',function(){
            $(this).parent('.abst-element-column').addClass('abst-element-column-hidden').removeClass('abst-element-column').find('input').val('');
        });

        jQuery("body").on('click','.abst-add-goal-button',function(){
            //if theres less than 11 goals
            if(jQuery('.abst-goals-container').length < 10){
                goalCount = jQuery('.abst-goals-container').length + 1;
                jQuery('<div class="abst-goals-container"><h5>Goal #'+goalCount+'</h5><div class="remove-goal"> X</div> ' +abst_magic_data.goals+'<input type="text" class="abst-goal-input-value" placeholder="Enter goal"></div>').insertBefore('.abst-add-goal-button');
            }
            else{
                alert('You can only have 10 goals');
            }
        });

        jQuery('body').on('click','.abst-element-column, .abst-goals-column',function(){
            //add class active to this element
            if(!$(this).hasClass('abst-add-element-column'))
                $(this).addClass('active');
            //remove class active from all other elements
            $(this).siblings().removeClass('active');
        });
        // Make the function available in the jQuery namespace
        $.abst_magic_bar = function(options) {
            abst_magic_bar(options);
        };
        
        // Add event listener for the admin bar menu item
        $(document).on('click', '#wp-admin-bar-ab-new-magic-test a', function(e) {
            e.preventDefault();
            abst_magic_bar();
        });

        jQuery('body').on('click','.ai-suggestion-item',function(){
            //remove the item clicked
            var theText = jQuery(this).text(); 
            jQuery(this).remove();
            // foreach each 
            jQuery('.active .abst-variant').each(function() {
                //if the input is empty
                if(!jQuery(this).val() || jQuery(this).val() == ''){
                    jQuery(this).val(theText).trigger('change').parents('.abst-section').removeClass('abst-hidden').find('input').show();
                    return false;
                }
            });
        });

        // Add event handler for variant delete buttons
        jQuery('body').on('click', '.abst-variant-delete', function() {
            // Get the parent .abst-magic-variants element
            var variantContainer = jQuery(this).closest('.abst-magic-variants');
            // Clear the input
            variantContainer.find('input').val('');
            // Hide the container
            variantContainer.hide();
        });

        jQuery('body').on('click','.remove-goal',function(){
            //remove the container
            jQuery(this).parent('.abst-goals-container').remove();
        });

        jQuery('body').on('click','[magic-eid]',function(){
            showMagicTest(jQuery(this).attr('magic-eid'), jQuery(this).attr('magic-index'));
        });

        
        function isInViewport(element) {
            const rect = element.getBoundingClientRect();
            return (
                rect.top >= 0 &&
                rect.left >= 0 &&
                rect.bottom <= (window.innerHeight || document.documentElement.clientHeight) &&
                rect.right <= (window.innerWidth || document.documentElement.clientWidth)
            );
        }
        jQuery('body').on('input blur change keyup paste click', '.abst-element-column.active input', function() {
            var inputValue = jQuery(this).val();
            var selector = jQuery(this).parents('.abst-element-column').find('.abst-magic-element-selector').val();
            if (selector && inputValue) {
                clearTimeout(window.abt_highlight);
                // Create or get the flash message element
                //IF DATA ATTR originalText is not set then setg it to text
                if(!jQuery(selector).data('originalText')){
                    jQuery(selector).data('originalText', jQuery(selector).text());
                }
                var originalText = jQuery(selector).data('originalText');
                // if selector not in view, scroll to it
                if(!isInViewport(jQuery(selector)[0]) && !jQuery(selector).hasClass('scrollingto')) {
                    jQuery(selector).addClass('scrollingto');
                    jQuery('html, body').animate({
                        scrollTop: jQuery(selector).offset().top - 100 - jQuery('#abst-magic-bar').height()
                    }, 600, function() {
                        jQuery(selector).removeClass('scrollingto');
                    });
                }
                jQuery(selector).text(inputValue);
                //set background color to orange
                jQuery(selector).attr('data-original-background-color', jQuery(selector).css('background-color'));
                //set background transition to 1s ease in out
                jQuery(selector).css('transition', 'background-color 1s ease-in-out');
                //fade in background color 1 s then back to original
                jQuery(selector).css('background-color', 'rgba(240, 173, 78, 0.3)');

                //loop through all abst-magic-variants if has a value then show if empty show the first and hide the rest

                // Show the updated value
                // Hide after 2 seconds
                window.abt_highlight  = setTimeout(function() {
                    jQuery(selector).text(originalText).css('background-color', jQuery(selector).data('original-background-color'));
                }, 2000);
            }

            var shownEmpty = false;
            setTimeout(function() {
            jQuery('.abst-element-column.active .abst-variant').each(function() {
                if(jQuery(this).val() == ''){
                    if(!shownEmpty){
                        console.log('empty'); 
                        jQuery(this).show().parents('.abst-section').removeClass('abst-hidden');
                        shownEmpty = true;
                    }
                    else{
                        jQuery(this).parents('.abst-section').addClass('abst-hidden');
                    }   
                }
                else
                {
                    jQuery(this).show().parents('.abst-section').removeClass('abst-hidden');
                }
            });
            }, 100);
        });
        //on select.goal-type change if it equals 'page' then append a pageselector dropdown that updates the input value next to it
        jQuery('body').on('change', '.abst-goals-container select.goal-type', function() { // update hidden input value
            jQuery(this).parents('.abst-goals-container').find('.abst-goal-input-value').val('');
            var type = jQuery(this).val();
            var goalContainer = jQuery(this).parents('.abst-goals-container');
            //array of special pages to tranfer value into value
            var specialPages = ['woo-order-pay', 'woo-order-recieved', 'woo'];
            if(type == 'page'){
                pagesWaiter = setInterval(function() {
                    if(abst_magic_data.pages && abst_magic_data.pages.length > 0){
                        clearInterval(pagesWaiter);
                        var pageSelect = '<select class="abst-goal-page-input">';
                        abst_magic_data.pages.forEach(function(page) {
                            pageSelect += '<option class="abst-goal-page-input" value="' + page[0] + '">' + page[1] + '</option>';
                        });
                        pageSelect += '</select>';
                        goalContainer.find('.abst-goal-input-value').hide();
                        goalContainer.append(pageSelect);
                    }
                }, 100);
            } 
            else if (specialPages.includes(type) || abIsInt(type)){
                goalContainer.find('.abst-goal-input-value').show().val(type);
                console.log('special type', type);                
            }
            else {
                goalContainer.find('.abst-goal-input-value').show();
                jQuery(this).parents('.abst-goals-container').find('.abst-goal-page-input').remove();
            }

            if(type == 'selector'){
                console.log('selector');
                window.magicLastFocus = jQuery(this).parents('.abst-goals-container').find('.abst-goal-input-value')[0];
                console.log('window.magicLastFocus', window.magicLastFocus);
              }
        
        }).trigger('change');


        jQuery('body').on('change', '.abst-goal-page-input', function() { // update hidden input value
            var page_id = jQuery(this).val();
            console.log('page_id', page_id);
            jQuery(this).parents('.abst-goals-container').find('.abst-goal-input-value').val(page_id);
        });

        jQuery('body').on('click','#abst-magic-bar-start',function(){
            //get all magic data
            var magic_data = [];
            jQuery('.abst-magic-variants').each(function() {
                var selector = jQuery(this).find('.abst-magic-element-selector').val();
                var variations = [];
                jQuery(this).find('.abst-variant').each(function() {
                    variations.push(jQuery(this).val());
                });
                magic_data.push({
                    selector: selector,
                    variations: variations
                });
            });

            //if theres no magicdata then alert
            if(!jQuery('.abst-element-column.active').length || !jQuery('.abst-magic-b-value').val()) {
                alert('Please add at least one element to the test');
                return;
            }

            if(!jQuery('.abst-goals-container').first().find('.abst-goal-input-value').val()) {
                alert('Please add at least one goal to the test');
                return;
            }

            var newTestData = {
                action: 'create_new_on_page_test',
                post_title: jQuery('#abst-magic-bar-title').val(),
                post_id: 'new',
                magic_definition: JSON.stringify(get_magic_definition_from_dom()),
                test_type: 'magic',
                conversion_style: 'bayesian',
                bt_experiments_url_query: jQuery("#abst-url-query").val(),
                bt_experiments_conversion_page: jQuery(".abst-goals-container").first().find('select').val(),
                bt_experiments_conversion_page_selector: '',
                bt_experiments_conversion_url: '',
                bt_experiments_conversion_selector: '',
                bt_experiments_full_page_default_page: '',
                css_test_variations: '',
                bt_experiments_conversion_time: '',
                bt_experiments_conversion_text: '',
                bt_experiments_target_option_device_size: jQuery('#abst-device-size').val(),
                bt_experiments_target_percentage: jQuery('#abst-traffic-percentage').val(),
                bt_allowed_roles: jQuery('#abst-user-roles-container input[type="checkbox"]:checked').map(function() {
                    return jQuery(this).val();
                }).get(),
                bt_experiments_conversion_order_value: 0,
                goal: get_goals_from_dom(),
                
            };

            if(jQuery(".abst-goals-container").first().find('select').val() == 'page')
                newTestData.bt_experiments_conversion_page = jQuery(".abst-goals-container").first().find('.abst-goal-input-value').val();

            if(jQuery(".abst-goals-container").first().find('select').val() == 'url')
                newTestData.bt_experiments_conversion_url = jQuery(".abst-goals-container").first().find('.abst-goal-input-value').val();

            if(jQuery(".abst-goals-container").first().find('select').val() == 'time')
                newTestData.bt_experiments_conversion_time = jQuery(".abst-goals-container").first().find('.abst-goal-input-value').val();

            if(jQuery(".abst-goals-container").first().find('select').val() == 'text')
                newTestData.bt_experiments_conversion_text = jQuery(".abst-goals-container").first().find('.abst-goal-input-value').val();
            
            jQuery.ajax({
                url: bt_ajaxurl,
                type: 'POST',
                data: newTestData,
                success: function(response) {
                    //redirect to experiment page
                    response = JSON.parse(response);
                    if(response.post_title && response.post_title !== ''){
                        alert(response.post_title + " created");
                        close_abst_magic_bar();
                    }
                }
            });
        
      });
    });
})(jQuery);

function get_goals_from_dom(){

    var goals = {}; 
    jQuery('.abst-goals-container').each(function(index){
        if(index === 0)
            return;
        
        var sel = jQuery(this).find('select').val();
        var val = jQuery(this).find('input').val();
        
        // Create an object with the dynamically named property
        var goalObj = {};
        goalObj[sel] = val;
        
        // Add to goals object with index as key (starting from 1)
        goals[index] = goalObj;
    });
    console.log(goals);

    return goals;
}


function get_magic_definition_from_dom(){
    var magic_definition = [];
    jQuery('.abst-element-column').each(function(){
        var selector = jQuery(this).find('.abst-magic-element-selector').val();
        var type = jQuery(this).find('.abst-element-title-type').text().trim().toLowerCase();
        var variations = [];
        jQuery(this).find('.abst-variant').each(function(){
            if(jQuery(this).val() !== '')
                variations.push(jQuery(this).val());
        });
        if(type && type !== '' && selector && selector !== '' && variations.length > 1){
            magic_definition.push({
                type: type,
                selector: selector,
                variations: variations
            });
        }
    });
    return magic_definition;
}

function get_abst_pageselector() {
    jQuery.ajax({
        url: bt_ajaxurl,
        type: 'GET',
        data: {
            action: 'ab_page_selector'
        },
        success: function(response) {
           response = JSON.parse(response);
           response.unshift(['', "Choose a Page"]);
           window.abst_magic_data.pages = response;
        }
    });
}
function abIsInt(value) {
    return !isNaN(value) && parseInt(Number(value)) == value && !isNaN(parseInt(value, 10));
}
